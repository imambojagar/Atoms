import {
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  Component,
  EventEmitter,
  Input,
  Output,
  ViewChild,
} from '@angular/core';
import {
  FormArray,
  FormBuilder,
  FormControl,
  FormGroup,
  FormsModule,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import {
  Attachments,
  ModelDefinitionModel,
  modelDefRelatedDefects,
} from '../../../models/model-definition-model';
import { TaxonomyModel } from '../../../models/taxonomy-model';
import { MenuItem, Message, MessageService } from 'primeng/api';
import { AuthService } from '../../../services/auth.service';
import { ModelService } from '../../../services/model-definition.service';
import { Router } from '@angular/router';
import { TaxonomyService } from '../../../services/taxonomy.service';
import { DialogService, DynamicDialogRef } from 'primeng/dynamicdialog';
import validateForm from '../../../shared/helpers/validateForm';
import { PrimengModule } from '../../../shared/primeng.module';
import { CommonModule } from '@angular/common';
import { TrPipe } from '../../../shared/pipes/tr.pipe';
import {
  TranslateModule,
  TranslatePipe,
  TranslateService,
} from '@ngx-translate/core';
import { AttachmentsComponent } from '../../../shared/components/attachments/attachments.component';

@Component({
  selector: 'app-add-model-definition',
  standalone: true,
  changeDetection: ChangeDetectionStrategy.OnPush,
  imports: [
    PrimengModule,
    ReactiveFormsModule,
    CommonModule,
    FormsModule,
    TrPipe,
    TranslateModule,
    AttachmentsComponent,
  ],
  templateUrl: './add-model-definition.component.html',
  styleUrl: './add-model-definition.component.scss',
})
export class AddModelDefinitionComponent {
  PAGE_TITLE: 'model-definition' = 'model-definition';

  @Input('showmodal') showmodal: boolean = false;
  @ViewChild('drawer') public modalComponent: any;
  @Output() openModals: EventEmitter<boolean> = new EventEmitter<boolean>();
  @Input('edit_model_id') edit_model_id: any;
  @Input('edit_model_index') edit_model_index: any;
  showButton = true;

  addModelForm!: FormGroup;
  manufacturerForm!: FormGroup;
  modelForm!: FormGroup;
  defectForm!: FormGroup;
  attachmentForm!: FormGroup;
  RelatedDefects!: FormGroup;
  modelCodes!: FormGroup;
  isSubmitted = false;
  modelDefinitionModel: ModelDefinitionModel = new ModelDefinitionModel();
  manufaturerModel: TaxonomyModel = new TaxonomyModel();
  msgs!: Message[];

  items!: MenuItem[];

  country: any = '';
  warranty: any = '';
  frequency: any[] = [];

  uploadedFiles: any[] = [];
  fileList: File[] = [];
  photoList: File[] = [];

  asset = [];
  manufatureresList: [] = [];

  model = [];
  assetId!: number;
  modelId!: number;
  manufacturer: any;
  supplierId!: number;
  suppliersList = [];

  uploadFiles: any[] = [];
  attachments: any;
  showDialog!: boolean;
  showModelDialog!: boolean;
  showDefectDialog!: boolean;
  parentId: any;

  defectsList: any[] = [];
  check: boolean = false;
  style = '';
  constructor(
    private cdr: ChangeDetectorRef,
    private formbuilder: FormBuilder,
    // private authService: AuthService,
    private api: ModelService,
    private router: Router,
    private messageService: MessageService,
    private taxonomyApi: TaxonomyService,
    public dialogService: DialogService
  ) { }

  ngOnInit(): void {
    // this.authService.isAuthenticated = true;
    this.addModelForm = this.formbuilder.group({
      // modelDefCode: [''],
      assetNDId: ['', Validators.required],
      modelId: ['', Validators.required],
      supplierId: [],
      countryOfOriginId: [],
      endOfSupportDate: [],
      stopProductionDate: [],
      sfda: [],
      warrantyPeriodId: [],
      initials: [],
      division: [],
      ecri: [],
      ppmFrequencyId: ['', Validators.required],
      specialTools: [],
      preInstallationChkLst: [],
      installationChkLst: [],
      calibrationTask: [],
      modelAccessories: [],
      ppmChkLst: [],
      picName: [],
      manuName: [],
      suppliers: this.formbuilder.array([
        this.formbuilder.group({
          id: 0,
          modelDefinitionId: 0,
          supplierId: [],
        }),
      ]),
      modelDefRelatedDefects: this.formbuilder.array([
        (this.RelatedDefects = this.formbuilder.group({
          id: 0, //autogenerated
          modelDefinitionId: 0, //autogenerated
          defectId: [],
          workPerformed: [],
          estimatedTime: [],
          cause: [],
        })),
      ]),
      modelDefTCodes: this.formbuilder.array([]),
    });
    this.manufacturerForm = this.formbuilder.group({
      manufacturerName: ['', Validators.required],
    });

    this.modelForm = this.formbuilder.group({
      modelName: ['', Validators.required],
    });
    this.defectForm = this.formbuilder.group({
      id: 0,
      name: ['', Validators.required],
    });
    this.attachmentForm = this.formbuilder.group({
      attachments: this.formbuilder.array([]),
    });
    // this.items = [
    //   { label: 'Home', routerLink: ['/'] },
    //   { label: 'Create Model' },
    // ];
    this.getCountry();
    this.getWarranty();
    this.getFrequency();
    this.getCodes();
    // this.getDefects();
  }

  //#region Suppliers Array
  suppliersControls() {
    return <FormArray>this.addModelForm.get('suppliers');
  }

  addMoreSuppliers() {
    (this.addModelForm.get('suppliers') as FormArray).push(
      this.formbuilder.group({
        id: 0,
        modelDefinitionId: 0,
        supplierId: [],
      })
    );
  }
  removeSuppliers(index: number) {
    (this.addModelForm.get('suppliers') as FormArray).removeAt(index);
  }

  onSelectSupplier(supplier: any, i: number) {
    this.supplierId = supplier.value.id;
    this.suppliersControls()
      .at(i)
      ?.get('supplierId')
      ?.setValue(this.supplierId);
  }
  //#endregion

  checkList(e: any) {
    if (e.value == this.frequency[0].id) {
      this.check = true;
      this.style = 'background-color:#BDBDBD; cursor: not-allowed;';
    } else {
      this.check = false;
      this.style = '';
    }
  }

  handlePhotoInput(files: any) {
    this.photoList = files.currentFiles[0];
    this.api.uploadFiles(this.photoList).subscribe((res) => {
      const data = res.data;
      this.addModelForm.value.picName = data[0];
      const sucess = res.isSuccess;
      const message = res.message;
      if (sucess == true) {
        this.messageService.add({
          severity: 'success',
          summary: 'Successful',
          detail: message,
          life: 3000,
        });
      } else {
        this.messageService.add({
          severity: 'error',
          summary: 'Error',
          detail: message,
          life: 3000,
        });
      }
    });
  }
  // photoReady(event: any) {
  //   this.addModelForm.value.picName = event.value[0];
  // }

  photoReady(event: string[]) {
    console.log('Uploaded files:', event);
    if (event.length > 0) {
      const picNameControl = this.addModelForm.get('picName') as FormControl; // Replace FormControl with your actual type if different
      picNameControl.setValue(event[0]);
    }
  }

  attachmentReady(event: any) {
    debugger;
    (this.attachmentForm.get('attachments') as FormArray).push(
      this.formbuilder.group({
        attachmentName: event.value[0],
        attachmentURL: [''],
        id: 0,
      })
    );
  }

  //Autocomplete Search
  searchAsset($event: any) {
    this.api.getAssetName({ assetName: $event.query }).subscribe((res: any) => {
      const data = res.data;
      this.asset = data;
      console.log('data', data);
    });
  }
  onSelectAsset(asset: any) {
    this.assetId = asset.value.id;
    console.log('asset event', asset.value.id);
  }

  searchModel($event: any) {
    let model = {
      name: $event.query,
      parentId: null,
    };
    this.api.getModel(model).subscribe((res: any) => (this.model = res.data));
  }
  onSelectModel(event: any) {
    this.modelId = event.value.modelId;
    this.addModelForm.controls['manuName'].setValue({
      taxonomyName: event.value.manufacturerName,
    });
  }

  getSpplier($event: any) {
    let supplier = {
      pageSize: 10,
      pageNumber: 1,
      suppliername: $event.query,
    };
    return this.api.getSupplier(supplier).subscribe((res: any) => {
      const data = res.data;
      this.suppliersList = data;
    });
  }

  codes: any[] = [];
  codeName: any[] = [];
  getCodes() {
    this.api.getLookups({ queryParams: 405 }).subscribe((res: any) => {
      this.codes = res.data;
      for (let i = 0; i < this.codes.length; i++) {
        (this.addModelForm.get('modelDefTCodes') as FormArray).push(
          this.formbuilder.group({
            id: 0,
            modelDefinitionId: 0,
            codeTypeId: [this.codes[i].id],
            codeValue: [''],
          })
        );

        this.codeName.push(this.codes[i].name);
      }
    });
  }
  modelDefTCodesControl() {
    return (<FormArray>this.addModelForm.get('modelDefTCodes')).controls;
  }
  //Sppliers Array
  relatedDefectsControl() {
    return (<FormArray>this.addModelForm.get('modelDefRelatedDefects'))
      .controls;
  }
  removeSupplier(index: number) {
    (this.addModelForm.get('modelDefRelatedDefects') as FormArray).removeAt(
      index
    );
  }
  // addMoreDefects() {
  //   (this.addModelForm.get('modelDefRelatedDefects') as FormArray).push(
  //     this.formbuilder.group({
  //       id: 0,
  //       modelDefinitionId: 0,
  //       defectId: [''],
  //       workPerformed: [''],
  //       cause: [''],
  //       estimatedTime: [''],
  //     })
  //   );
  // }

  addMoreDefects() {
    (this.addModelForm.get('modelDefRelatedDefects') as FormArray).push(
      this.formbuilder.group({
        id: 0,
        modelDefinitionId: 0,
        defectId: [],
        defectName: [],
        cause: [],
        workPerformed: [],
        estimatedTime: [],
      })
    );
  }

  // Drop Downs Functions
  getCountry() {
    return this.api.getCountry().subscribe((res: any) => {
      this.country = res.data;
    });
  }

  getWarranty() {
    return this.api.getWarranty().subscribe((res: any) => {
      this.warranty = res.data;
    });
  }

  getFrequency() {
    return this.api.getFrequency().subscribe((res: any) => {
      this.frequency = res.data;
    });
  }
  //Submit Button
  addModelSubmit() {
    console.log('add form ', this.addModelForm);
    this.isSubmitted = true;
    if (this.addModelForm.invalid) {
      validateForm.validateAllFormFields(this.addModelForm);
      this.messageService.add({
        severity: 'error',
        summary: 'Error',
        detail: 'Please Fill Required Data',
        life: 3000,
      });
    } else {
      this.modelDefinitionModel.assetNDId = this.assetId;
      this.modelDefinitionModel.modelId = this.modelId;
      this.modelDefinitionModel.supplierId = this.supplierId;

      this.modelDefinitionModel.endOfSupportDate =
        this.addModelForm.value.endOfSupportDate;

      this.modelDefinitionModel.stopProductionDate =
        this.addModelForm.value.stopProductionDate;

      this.modelDefinitionModel.countryOfOriginId =
        this.addModelForm.value.countryOfOriginId;

      this.modelDefinitionModel.ppmFrequencyId =
        this.addModelForm.value.ppmFrequencyId;

      this.modelDefinitionModel.specialTools =
        this.addModelForm.value.specialTools;

      this.modelDefinitionModel.modelAccessories =
        this.addModelForm.value.modelAccessories;

      this.modelDefinitionModel.ppmChkLst = this.addModelForm.value.ppmChkLst;

      this.modelDefinitionModel.picName = this.addModelForm.value.picName;

      if (this.addModelForm.value.suppliers[0].supplierId) {
        this.modelDefinitionModel.suppliers = this.addModelForm.value.suppliers;
      }
      console.log(this.addModelForm.value);
      this.modelDefinitionModel.modelDefTCodes =
        this.addModelForm.value.modelDefTCodes;

      if (!this.modelDefinitionModel.attachments) {
        this.modelDefinitionModel.attachments = [];
      }

      (this.attachmentForm.get('attachments') as FormArray).controls.forEach(
        (element) => {
          let attach = new Attachments();
          attach.modelDefinitionId = this.modelDefinitionModel.id;
          attach.attachmentName = element.value.attachmentName;
          attach.attachmentURL = null;
          this.modelDefinitionModel.attachments.push(attach);
        }
      );
      if (!this.modelDefinitionModel.modelDefRelatedDefects) {
        this.modelDefinitionModel.modelDefRelatedDefects = [];
      }
      this.modelDefinitionModel.modelDefRelatedDefects = [];
      (
        this.addModelForm.get('modelDefRelatedDefects') as FormArray
      ).controls.forEach((element) => {
        let attach = new modelDefRelatedDefects();
        attach.modelDefinitionId = this.modelDefinitionModel.id;
        if (element.value.defectId == null) {
          attach.defectId = null;
        } else {
          attach.defectId = element.value.defectId.id;
        }
        attach.workPerformed = element.value.workPerformed;
        attach.estimatedTime = element.value.estimatedTime;
        attach.cause = element.value.cause;
        this.modelDefinitionModel.modelDefRelatedDefects.push(attach);
      });
      console.log('Model Definition model :', this.modelDefinitionModel);
      this.api
        .postModelDefinition(this.modelDefinitionModel)
        .subscribe((res) => {
          console.log('Model Definition model :', this.modelDefinitionModel);
          const message = res.message;
          const sucess = res.isSuccess;
          if (sucess == true) {
            this.messageService.add({
              severity: 'success',
              summary: 'Successful',
              detail: message,
              life: 3000,
            });
            this.addModelForm.reset();
            this.close_modal();
            // this.router.navigate(['assets/model-definition']);
          } else {
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: message,
              life: 3000,
            });
          }
          this.cdr.detectChanges();
        });
    }
  }

  // getDefects() {
  //   this.api.getDefects({}).subscribe((res) => {
  //     this.defectsList = res.data;
  //   });
  // }
  searchDefects($event: any) {
    let defect = {
      pageSize: 10,
      pageNumber: 1,
      name: $event.query,
    };
    this.api.getDefects(defect).subscribe((res) => {
      const data = res.data;
      this.defectsList = data;
      console.log(this.defectsList);
      this.cdr.detectChanges()
    });
  }
  defectId!: number;
  onSelectDefect(defect: any, i: number) {
    let defArr = this.relatedDefectsControl()[
      i
    ] as unknown as modelDefRelatedDefects;
    defArr.defectId = defect.value.id;
  }

  openDialog() {
    this.showDialog = true;
  }
  openModelDialog() {
    this.showModelDialog = true;
  }
  openDefectDialog() {
    this.showDefectDialog = true;
  }

  searchManufacturer($event: any) {
    this.taxonomyApi
      .searchManufacturerByName({ name: $event.query })
      .subscribe((res) => {
        this.manufatureresList = res.data;
      });
  }
  onSelectManufacturer(event: any) {
    this.parentId = event.value.id;
  }
  addManufacturer() {

    console.log(this.manufacturerForm.value);

    if (this.manufacturerForm.invalid) {
      validateForm.validateAllFormFields(this.manufacturerForm);
      this.messageService.add({
        severity: 'error',
        summary: 'Error',
        detail: 'Please Fill Required Data',
        life: 3000,
      });
    } else {
      this.manufaturerModel.taxonomyName =
        this.manufacturerForm.value.manufacturerName;
      this.manufaturerModel.parentId = '';
      this.taxonomyApi.postTaxonomy(this.manufaturerModel).subscribe((res) => {
        const data = res.data;
        const message = res.message;
        const success = res.isSuccess;
        if (success == true) {
          this.messageService.add({
            severity: 'success',
            summary: 'Successful',
            detail: message,
            life: 3000,
          });
          this.manufacturerForm.reset();
          this.showDialog = false;
        } else {
          this.messageService.add({
            severity: 'error',
            summary: 'Error',
            detail: message,
            life: 3000,
          });
        }
      });
    }
  }

  addDefect() {
    if (this.defectForm.invalid) {
      validateForm.validateAllFormFields(this.defectForm);
      this.messageService.add({
        severity: 'error',
        summary: 'Error',
        detail: 'Please Fill Required Data',
        life: 3000,
      });
    } else {
      this.api.addDefects(this.defectForm.value).subscribe((res) => {
        const message = res.message;
        const sucess = res.isSuccess;
        if (sucess == true) {
          this.messageService.add({
            severity: 'success',
            summary: 'Successful',
            detail: message,
            life: 3000,
          });
          this.showDefectDialog = false;
        } else {
          this.messageService.add({
            severity: 'error',
            summary: 'Error',
            detail: message,
            life: 3000,
          });
        }
      });
    }
  }

  addModel() {
    if (this.modelForm.invalid) {
      validateForm.validateAllFormFields(this.modelForm);
      this.messageService.add({
        severity: 'error',
        summary: 'Error',
        detail: 'Please Fill Required Data',
        life: 3000,
      });
    } else {
      if (this.parentId == undefined) {
        this.messageService.add({
          severity: 'error',
          summary: 'Error',
          detail: 'Please Select Manufacturer First',
          life: 3000,
        });
      } else {
        this.manufaturerModel.taxonomyName = this.modelForm.value.modelName;
        this.manufaturerModel.parentId = this.parentId;
        this.taxonomyApi
          .postTaxonomy(this.manufaturerModel)
          .subscribe((res) => {
            const data = res.data;
            const message = res.message;
            const success = res.isSuccess;
            if (success == true) {
              this.messageService.add({
                severity: 'success',
                summary: 'Successful',
                detail: message,
                life: 3000,
              });
              this.close_modal()
            } else {
              this.messageService.add({
                severity: 'error',
                summary: 'Error',
                detail: message,
                life: 3000,
              });
            }
          });
      }
    }
  }

  ref!: DynamicDialogRef;
  ngOnDestroy() {
    if (this.ref) {
      this.ref.close();
    }
  }

  close_modal() {
    this.ngOnInit()
    this.openModals.emit(false);
  }
}
